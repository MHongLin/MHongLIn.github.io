{"pages":[],"posts":[{"title":"ICARUS美化日志","text":"这么说不太好，但是 hexo 的坑真的多，好处就是不要钱吧... 1 首页三栏，文章两栏2021/3/16 参考别人的这个，没有成功，就用直觉，按别人的思路，随机改。最后 themes/icarus/layout/widget/layout.jsx被改成了这样： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576const { Component } = require('inferno');const classname = require('hexo-component-inferno/lib/util/classname');const Head = require('./common/head');const Navbar = require('./common/navbar');const Widgets = require('./common/widgets');const Footer = require('./common/footer');const Scripts = require('./common/scripts');const Search = require('./common/search');module.exports = class extends Component { render() { const { site, config, page, helper, body } = this.props; const language = page.lang || page.language || config.language; const columnCount = Widgets.getColumnCount(config.widgets); if(page.path==='index.html'){ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=&quot;section&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;columns&quot;&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-6-widescreen': columnCount === 3 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'right'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;; } else{ return &lt;html lang={language ? language.substr(0, 2) : ''}&gt; &lt;Head site={site} config={config} helper={helper} page={page} /&gt; &lt;body class={`is-${columnCount}-column`}&gt; &lt;Navbar config={config} helper={helper} page={page} /&gt; &lt;section class=&quot;section&quot;&gt; &lt;div class=&quot;container&quot;&gt; &lt;div class=&quot;columns&quot;&gt; &lt;div class={classname({ column: true, 'order-2': true, 'column-main': true, 'is-12': columnCount === 1, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2, 'is-8-tablet is-8-desktop is-8-widescreen': columnCount === 2 })} dangerouslySetInnerHTML={{ __html: body }}&gt;&lt;/div&gt; &lt;Widgets site={site} config={config} helper={helper} page={page} position={'left'} /&gt; &lt;/div&gt; &lt;/div&gt; &lt;/section&gt; &lt;Footer config={config} helper={helper} /&gt; &lt;Scripts site={site} config={config} helper={helper} page={page} /&gt; &lt;Search config={config} helper={helper} /&gt; &lt;/body&gt; &lt;/html&gt;; } }}; 2 数学公式的渲染2021/3/16 参考这边 修改完之后，公式是没有关系了，但是标题渲染不出来了，先自己用 html 写吧。 1&lt;h1 id=&quot;1 概念&quot;&gt;&lt;a href=&quot;1 概念&quot; class=&quot;headerlink&quot; title=&quot;1 概念&quot;&gt;&lt;/a&gt;1 概念&lt;/h1&gt;","link":"/2021/03/16/%E5%8F%AF%E7%88%B1%E6%8C%96%E6%8E%98%E6%9C%BA/HEXO%E5%8D%9A%E5%AE%A2%E7%BE%8E%E5%8C%96/"},{"title":"matlab生成W-M分形形面","text":"一个二维的分形表面... 1. 二维平面的 W-M 公式z(x)=G^{D-1}\\sum_{n=n1}^{\\infty}\\frac{cos(2 \\pi \\gamma^n x)}{\\gamma ^{(2-D)n}}$\\gamma=1.5$；$n$ 为自然序列，通常取 $n=1,2,3…100$。 matlab 中实现，取 $G=1$，$D$ 为 $1$ 和 $1.5$: 1234567891011clearclcG=1;n= 0:1:100;x = 1:1:1000;d = [1 1.5]f = @(x,n,d)1.5.^((d-2).*n).*cos(x.*1.5.^n.*2.*pi).*G.^(d-1)g = @(x,d)arrayfun(@(x)trapz(n,f(x,n,d)),x)plot(x,g(x,d(1)))figureplot(x,g(x,d(2)))","link":"/2021/03/18/%E5%8F%AF%E7%88%B1%E6%8C%96%E6%8E%98%E6%9C%BA/matlab%E7%94%9F%E6%88%90W-M%E5%88%86%E5%BD%A2%E5%BD%A2%E9%9D%A2/"},{"title":"为您读书","text":"将喜马拉雅朗读亭生成的作品粘贴到个人主页的一种方法：这是一篇可以听的文章，为您读书。 今天真的很巧，是世界读书日，我很便宜地买到了好多几米的绘本。刚好昨天在黄龙录了好多声音，本想着今天整理了发一下，没想到这么曲折，试过各种方法，网易家的外链是最好看的。为了发这个文章，我居然成为了网易音乐人，而且，审核都超级快，各种审核一天就完成了。 1 诗歌文学 《简爱》: 最早的霸道总裁爱上我，独立倔强的勃朗特姐妹 《鲁兵逊漂流记》：比困难更可怕的是害怕困难的心理，I am lucky to be alive. 有一位小姐，她甜美善良 (爱的小心翼翼) 爱不仅爱你伟岸的身躯，也爱你坚持的位置，足下的土地 同一人事上，第二次凑巧是不会有的。我只爱过一个正当最好年纪的人。 2 幽默搞笑 就算让我知道我永远在暗恋，我也会笑着说再见。你好，我是 F 班 的袁湘琴。 佐罗偷情（这个太有趣了，被网易云和谐了，改了名称，我还以为自己传错了） 我要你做我的圣诞礼物 不要怀疑我们之间的友谊，我只是穷了而已 圣诞节到了，单身狗即将升级为雪橇犬 3 童话故事 我爱你，这么大 一个人读多个角色，太有趣了。以后有了孩子，给她讲故事，可以考虑给自己开个小电台，专门给小朋友讲故事。 4 几米童话 《向左走，向右走》：他们彼此深信，是瞬间的热情让他们相遇，这种相遇是美丽的 我不擅长交际 只为比你们高一点，我在跷跷板上坐了很久，其实我并不喜欢坐在这里 平凡的我遇见了所有的不平凡，什么时候可以遇见平凡的你 如果我变得和你想的不一样，请爱我原来的样子 怎样发布朗读呢 在喜马拉雅朗读亭读自己喜欢的文字 下载到手机里，并找到文件的位置，将它传到电脑上 我们下载的文件后缀是 m4a，没关系，直接将后缀改成 mp3 注册成为网易云音乐的——网易音乐人 上传自己的声音文件 生成外链播放器: 注意取消勾选自动打开，要不像这篇文章这样的情况，打开后就像到了菜市场 撒花","link":"/2021/04/23/%E5%8F%AF%E7%88%B1%E6%8C%96%E6%8E%98%E6%9C%BA/%E6%9C%89%E5%A3%B0%E7%AC%94%E8%AE%B0%E6%9C%AC-%E4%B8%BA%E4%BD%A0%E8%AF%BB%E4%B9%A6/"},{"title":"对偶坐标系","text":"为了写出与坐标无关的公式，引入 “坐标系” 的 “对偶坐标系”。然后用 “度量张量” ，完成两个坐标系之间坐标的变换，常量的计算以及基矢量的变换。指标表示与指标运算特别重要。 1 概念 牢记这里的名称，既可以区分不同坐标系，又方便后面的运算： 协变坐标系 协变坐标 逆变基矢量 $O-x_1x_2x_3$ $x_1,x_2,x_3$ $\\pmb{x}^1,\\pmb{x}^2,\\pmb{x}^3$ 逆变坐标系 逆变坐标 协变基矢量 $O-x^1x^2x^3$ $x^1,x^2,x^3$ $\\pmb{x}_1,\\pmb{x}_2,\\pmb{x}_3$ 协变：一个变量扩大 $n$ 倍，另一个量跟着扩大 $n$ 倍。 逆变：一个变量扩大 $n$ 倍，另一个量跟着扩大 $\\frac{1}{n}$ 倍。 协变坐标会被写成一行，逆变坐标写成一列。 局部坐标系：基矢量的大小和方向将随着坐标点的不同而变化，是空间点的函数。例如曲线坐标系。 整体坐标系坐标系：基矢量的大小和方向不会随着坐标点的不同而变化，是常矢量。例如直角坐标系和仿射坐标系。 标架：空间一固定点 $O$ 与三个有序基矢量的构型全体。 2 直角坐标系及其对偶坐标系 直角坐标系 $O-x_1x_2x_3$，对应基矢量 $\\pmb{a}^i$。直角坐标系的对偶坐标系 $O-x^1x^2x^3$，对应基矢量 $\\pmb{a}_i$。 基矢量之间的关系： $\\pmb{a}^i$，$\\pmb{a}_i$ 都是单位正交基矢量。 直角坐标系与其对偶坐标系一模一样：$\\pmb{a}^1=\\pmb{a}_1$，$\\pmb{a}^2=\\pmb{a}_2$，$\\pmb{a}^3=\\pmb{a}_3$。 基矢量的点积运算可以简化为单位矩阵： \\pmb{a}_i\\cdot \\pmb{a}^j=\\delta^j_i=\\left[ \\begin{matrix} \\delta^1_1 & \\delta^1_2 & \\delta^1_3\\\\ \\delta^2_1 & \\delta^2_2 & \\delta^2_3\\\\ \\delta^3_1 & \\delta^3_2 & \\delta^3_3\\\\ \\end{matrix} \\right]=\\left[ \\begin{matrix} 1 & 0 & 0\\\\ 0 & 1 & 0\\\\ 0 & 0 & 1 \\end{matrix} \\right]采用对偶坐标系，是希望在仿射坐标系和曲线坐标系中，建立以上和直角坐标系中同样运算规则。比如说，希望在任何坐标系中 $W=\\pmb{F}\\cdot \\pmb{s}$ 都能求出功，功本来就和坐标系的选择无关。 3 仿射坐标系及其对偶坐标系 仿射坐标系 $O-x_1x_2x_3$，对应基矢量 $\\pmb{g}^i$。仿射坐标系的对偶坐标系 $O-x^1x^2x^3$，对应基矢量 $\\pmb{g}_i$。 在摄影和景物透视中经常遇到仿射坐标系。仿射坐标系的基矢量既不是单位矢量，也不正交。我们将方宽条件引入其对偶坐标系。 3-1 求出对偶坐标系 我们希望基矢量有以下关系： $$\\pmb{g}_i\\cdot \\pmb{g}^j=\\delta^j_i=\\left[ \\begin{matrix} 1 & 0 & 0\\\\ 0 & 1 & 0\\\\ 0 & 0 & 1 \\end{matrix} \\right]\\tag{3-1}$$ 在仿射坐标系中，有: $$\\pmb{g}_1\\cdot(\\pmb{g}_2\\times \\pmb{g}_3)=V\\tag{3-2}$$ 根据式 $(3-1)$ 和 $(3-2)$，可以求出： $$\\pmb{g}^1=\\frac{1}{V}(\\pmb{g}_2\\times \\pmb{g}_3)\\tag{3-3-1}$$ 同理： $$\\pmb{g}^2=\\frac{1}{V}(\\pmb{g}_1\\times \\pmb{g}_3)\\tag{3-3-2}$$ $$\\pmb{g}^3=\\frac{1}{V}(\\pmb{g}_2\\times \\pmb{g}_1)\\tag{3-3-3}$$ 3-2 两个坐标系的关系 基矢量分解 基矢量的分解，建立两个坐标之间的变换。 $1$ 个逆变基矢量可以沿着协变基矢量分解成 $3$ 个分量，$3$ 个逆变基矢量可以沿着协变基矢量分解成 $9$ 个分量。协变基矢量同理。用矩阵表示为： \\left[ \\begin{matrix} \\pmb{g}_1 \\\\ \\pmb{g}_2 \\\\\\pmb{g}_3 \\end{matrix} \\right]= \\left[ \\begin{matrix} g_{11} & g_{12} & g_{13}\\\\ g_{21} & g_{22} & g_{23}\\\\ g_{31} & g_{32} & g_{33} \\end{matrix} \\right] \\left[ \\begin{matrix} \\pmb{g}^1\\\\ \\pmb{g}^2\\\\ \\pmb{g}^3 \\end{matrix} \\right]\\tag{3-4}g_{ij}=\\left[ \\begin{matrix} g_{11} & g_{12} & g_{13}\\\\ g_{21} & g_{22} & g_{23}\\\\ g_{31} & g_{32} & g_{33} \\end{matrix} \\right]\\tag{3-5}$g_{ij}$ 称为度量张量，可以将指标降低，即将逆变基矢量变成协变基矢量。 同理，有 $g^{ij}$ 实现指标升高： \\left[ \\begin{matrix} \\pmb{g}^1\\\\ \\pmb{g}^2\\\\ \\pmb{g}^3 \\end{matrix} \\right]= \\left[ \\begin{matrix} g^{11} & g^{12} & g^{13}\\\\ g^{21} & g^{22} & g^{23}\\\\ g^{31} & g^{32} & g^{33} \\end{matrix} \\right]\\left[ \\begin{matrix} \\pmb{g}_1 \\\\ \\pmb{g}_2 \\\\\\pmb{g}_3 \\end{matrix} \\right] \\tag{3-6}坐标变换 度量张量可以实现基变换，也可以实现坐标变换。根据式 $(3-5)$，在逆变坐标系 $O-x^1x^2x^3$ 下的一个矢量 $\\pmb{v}$ 可以表示为： \\left[ \\begin{matrix} v^1 & v^2 & v^3 \\end{matrix} \\right]\\left[ \\begin{matrix} \\pmb{g}_1 \\\\ \\pmb{g}_2 \\\\\\pmb{g}_3 \\end{matrix} \\right]= \\left[ \\begin{matrix} v^1 & v^2 & v^3 \\end{matrix} \\right] \\left[ \\begin{matrix} g_{11} & g_{12} & g_{13}\\\\ g_{21} & g_{22} & g_{23}\\\\ g_{31} & g_{32} & g_{33} \\end{matrix} \\right] \\left[ \\begin{matrix} \\pmb{g}^1\\\\ \\pmb{g}^2\\\\ \\pmb{g}^3 \\end{matrix} \\right]\\tag{3-7}有坐标变换公式： \\left[ \\begin{matrix} v_1 & v_2 & v_3 \\end{matrix} \\right]= \\left[ \\begin{matrix} v^1 & v^2 & v^3 \\end{matrix} \\right] \\left[ \\begin{matrix} g_{11} & g_{12} & g_{13}\\\\ g_{21} & g_{22} & g_{23}\\\\ g_{31} & g_{32} & g_{33} \\end{matrix} \\right] \\tag{3-8}度量张量 以物理公式 $W=\\pmb{F}\\cdot \\pmb{s}$ 为例，看度量张量的好处。 如果将 $F$ 和 $s$ 都用逆变坐标表示，那么： W=\\pmb{F}\\cdot \\pmb{s}=f^is^j\\pmb{g}_i\\cdot \\pmb{g}_j\\tag{3-9}在仿射坐标系中，$\\pmb{g}_i\\cdot \\pmb{g}_j=1$ 不一定成立，但是我们希望物理定律，可以用一个不管在哪个坐标系中都一样的公式表示。 可以将两个向量一个用协变坐标表示，一个用逆变坐标表示。 W=\\pmb{F}\\cdot \\pmb{s}=f^is^j\\pmb{g}_i\\cdot \\pmb{g}_j=f^is^jg_{ij}\\pmb{g}^j\\cdot \\pmb{g}_j\\tag{3-10}我不会指标运算，这边根本不会用指标表示。是吧，会用指标运算很重要。","link":"/2021/03/17/%E6%95%B0%E5%AD%A6/%E5%AF%B9%E5%81%B6%E5%9D%90%E6%A0%87%E7%B3%BB/"},{"title":"遇见树莓派","text":"9526bece3242887b879b50bd53a3c1ac0d660aa03826f7324bbe10b82020576615196a412b5680ced0ed77e4229bf814a0f13a526a2e13b0f2d2e9c39421563bd68d0e4f6aaed4f64baa3d81d2a26ac08ee80343599e6ba54360d7568dbf1356137087d4a03fe49396d8bb22be57836ff719a082ab4f367792c4d988735ef3ea861e2b754bc19d4148723caed988dfcc7944ae1953876f05fe19ddffd8277722674294b6677cf9cd83ce8ab8eb84235f253a9e339f017ada3c2cbd718c32dcfcbb5b7513b78fd4afabbf3ba7b1c3a61ab8add3b363baa902d702e1f19259758c25067c023e093cae925f12e108179a7594fb895c2155dbbbbc43cd18929e5445437aab2fbf55cee20cb771c1e1d4cad3c91297c5074ae453d0bb1c47872fff7d269c255b7f5db9c8ec2ef2334375cf3d8bd51eef5b38ce5967d59c77d2e474bfb3943c1282a2cbcba21fec8cc9c8e8558784d43ac5304db73109d996eacd2d7f84d1ea61598360adc4f1d07ce36d22f1e0730137aa57da178e736cecb72485706799e71a5bd1cdba7f0a41231716992d83b3fde79d71b6858745b96e00f52da4b93b34bf801688c9fc975988146da52170561d8779a02b9f2d7ed5393d6af8dd8379081c9708ee7e21f20fd75b7121e6767ed371a20a6dbe120e63ce95098c14f7b87d654054865b9610af9c19c9fd99d6ef9053274c1462feedd185cb0eeeda0e989be4e51666b92959c87f25ac90358fb329f4918421a56cbfc6b53416a6737c4b262f22d85c45edfca8eb1fb72d82e03778ead00e019c296ec21730c324d3be2319792d52d2b8ba9372c50b6f24e6b8029082874e418a21e6a8e7287e2694f8dca59920ad5752537992979215cfcb5303163584f0e99bb3477b8537e5e4d61d30e4c38f0cf6e9c4dba2a9a065f4bc6198fe5f33bb94b144a49e2340f06ea31eb2d1e2de5160c65868b760f59b1b9b0c4bd49d0659cc75e5364b170a335fbc67290e6e5af672718b3d85001496770fa2efde502418c6cde35e11a2cbaaaf13d1b25fb27b4b85525bd99f2c9037568f01a7d017ccd2f4c01c1cece67b2293d10044985d40237fad2b7cd8f864dbdad40caf05498dac5444e33c60d6d4b59a43514dad7caafe8350e1984f697cc1c1b85256902bda6e4e9566a86a6e7b6d7f56fdf81c5f5d22a39234caca740cdb25acb193e6042c9ff272b60615d6b63889109a1707f7649ecf4b93778af52f85bac9aa2531ee6e76ef7c3aa610b5ef37cbd11c1b1c7f1a608c875fd04d03e63a07e69ed707758c46e4012bcb302309ed17d39560ff8a9380e6a1f2b699d54651a528db68627747fe6f6bcca0b1a41c0381eda37aa540efb31f8ac72a7070091ad8790f3f950a80490c12cd68807e549c1a25e62177fba839e034fbbc16a012f82a07519319c5e71cacb39d4f47d2b666c8f750066f8a06af2753289a45a0c24cdda0393bd3e8a7b8db6221f744d0488b451cb25b122bdfa3f1fdf1d9524530d0fe19d4eb52c2baca336af30b5e4c235ddcfc8006718423ba5111fd71a9806774ed6f6016e748133bc9ad1c3e0673f70b76103e83ddc21806d88882479502bd5630dfc817e6c03df47b4551884514589dbdb7d1837ca86992839c5f9898fdac3563a862f05a82ba5de42917f280342e8c97f9f3962294de78db09c6300fd764659530cb19febdd614949ced1cc6ec9be979bd821bd87c6934d0283387b6fbbafacb5203b65bf668c9a7f35afd256045b113183c773ecdc328e0ec99aedcd6ab466deb5ac1c5d4bc37ba8e4732ad79ad4067d938691954940e233d6580e3a12d8fd8f2944c3354a322f6b7f221906f2b7d92e154424b7702a999cc8265f9693ab7df948d99096d06b5a1ce07c0f2215cba747ed30b160ae2ebe778d77fd2bc09b805d32d8730b20a2ffb1afa9b93b9c40af339780ba7cad5b589bff62c07898d8386b559d01c7fd5f65344c90a6f8e02208233040a9e6f5a0777ceb3c85702cee155d7cfc9042647a984682e584dfa627bcb750fb8f84cf0c8659aa2f066393817a01e92c20652872c147e79b855aa019e9627b23b684e6f162fa5307f088869f4b8fc6d779923711793a292f90261222ce4378128930f1559acdc9eb77bee4fccead3e4f2ed2e0c9ec2daca8d6ae5548242a9caaba01f2bad12d516ed86e4f579bebcf06028f53e3211bbe79bee96b5e601456e964cbba1ce34299f0ba0e6359841cb4a48ab7214ece50438a48d5b5990902a2dc3b03c07b110ea218c5d140a888871001f8946292d0f610dd4d2abcbcde52c2f5febf897eebf9b02e671262baadcbe5eb09dce6c145e698babe91dc60686393fe04c139310aa56a606d73116e41b25bae74fe9d4dd2b34d4531ec42203750b750dd1646f7581cc3a0268a5e1244ca8480517c1b366e5e7b1375217bed886caf90c51a8922fb330a1760e2bc5257c3ac8168bedf9109bfe2988bc2bd67e8719468ecefc4a291e3205cf0f65d7aed508b69dc6b9ddd6c5bbe529e273aa7fdacbbb9da70ba3fc46e61fc27274530a38bc8264a3becb094dbcfdcaa47787f5f7f0c82d5f4b580d7189dc6d6ad1f3487bc8840296eb5a89fc52503f49b4477c79f3978e719a34b1dd0134106ac31532b447db00a34cb10df4ce9bc77798a64632c8830ce3f3da2f0d8a9b67af93575d16b0042dd7eda617e0bbb3f317b02f7864c9024ba16f97210cc69a22eeefd2adc616339f8610c99fc452b0a268171922a95c85983e39bfdf2735dbad545654dacf1214e271460d0a06fba541838e2607df09a7ec749bdd5fff51c6ac1d5165b5d064cc1b9289fe87c9b9bd15486633e080839b703bc6971f30b4d13314a994ae133f154b40facacbc832b7e113b462a27738b7f54c0801715fe388f21126599baa4b5fa50c20ea075824d180fbdf786bf9d5e269aff736fa2854eaa6b42942f3512675da72dff28df11e9ebfdf90989349da96b6dace1bf063ba647590ff4ccdb5d3ccee9fb1219f8fe25fd6c9de69bbcf2affd1fb972c09bfe4c15c3fe20501ffbda1475c7fc5e744d4a3723e2fefb9b7dd14cfb21888d7a8d0e2ed8db54a01e26ce42cfcb2c6416ab03b7aa319b28816459cfffde1371091f1cbc052182099d14316745c96e1669fbf57415f41332be79b8bacf25c38437bdde3034f4054c1e31cc025b70532781a0f989aedce9035def29591821ef3440957f70de1efa3ffe43475ed8d89374e87a7961b51e5139b0c26d7b6e125bb561dbec29d67c1189d57e037efaee0a85f1ee632a66814ebd66a86bf2566256716fd4b1835b75d585e19bb4c21f50652706996dccd52fbd33971e2b1bc5ec1dff22d9e9d6d9c606e22a28d827eabc021f36d3db453c77cf08c215030429632806c5efc6210a4adc58909dd56fc5b85e77458509b6d239f03e59ca27e11ff1a43f13823a8f9caa12b906867195587fa0ae488304c18cbb8d339521fd0e5d22078c5c804c853fdf6a0f7e58d31491b4608bcaee0b815848c9d730222cfc2ac0cd86ed4787eff78b5f25bcc8c2cff9164f583e0d4bbc36f00b93d1c2281e253ba2eb01ba2a1dd3b64a2dd34c7 我妈妈的生日是：","link":"/2021/03/28/%E6%A0%91%E8%8E%93%E6%B4%BE/%E9%81%87%E8%A7%81%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"title":"2021时间的故事","text":" 我的温柔可爱都设置为仅你可见！","link":"/2021/03/19/%E7%99%BD%E5%99%AA%E9%9F%B3/2021%E6%97%B6%E9%97%B4%E7%9A%84%E6%95%85%E4%BA%8B/"},{"title":"《像外行一样思考，像专家一样实践》笔记","text":"读完这本书，我才发现，那位讲数值计算的鲁老师是非常聪明的，他掌握了这本书第三章的精髓。BEST FIRST 1 像外行一样思考，像专家一样实践 海阔天空的构思 外行人的思考方法是直接从结论开始去做，从希望得到的结果开始去做。 海岸线的长度不一致：分形学说 在研究的过程中如果没有数学这个专业工具是绝对不可能成功的。 内容宽泛的理论 框架理论中包含了神经生理学、计算理论学、数学、心理学等等目前所知道的理论，并且这个理论足够含糊，无论什么现象都可以包括进来。——明斯基 身为专家要有舍弃固有思想、大胆创新的魄力与勇气 除了用机器语言编程外，为什么还需要别的语言呢？——冯诺依曼 要勇于反对别人的意见 想出引人入胜的点子，只要反对大家所说的就可以了，大家都认同的好方法基本上都不太令人满意。——明斯基 如果数量达到阿伏伽德罗常数，则计算机也不能全部检查。 理论越是适用于简单、抽象的问题，越有价值。 越简单、抽象化就会产生越绝妙，越鲜明的理论：物理书上的小球。 用情景推动研究进展：情景的关键，是对人和社会有何作用。对情节描述的基本能力是对未来的预见能力。 所谓构想力是限定问题的能力。如果在解决问题时，能准确地限定问题关键点，将会非常有效。如果能给问题下个定义，就已经解决了 60%。 智慧体力——所谓集中精力，就是让自己成为问题本身 做研究和搞开发没有具体的目标是绝对不行的 与别人交流，完善自己的构思 能做出好结果的方法，其中必有诀窍。结果不会像魔术一样自己跑出来。识别结果的能力很重要。 创造的基础是模仿 2 计算机的挑战：问题的解决能力与教育认识通过由细胞构成的叫做神经网的硬件来进行计算的。计算时这些神经细胞不是一个个单独进行，而是组成网状结构进行思考。 模拟计算：将要研究的对象换成与之相似的现象。比如用绳子计算悬链线方程。 现如今，人和计算机都是计算出最优答案，不是最佳答案。 真正的能力是解决生活中具体问题的能力。、 从例题入手再分析问题是个不错的方法。从例题开始，得出事物之间的关联，再建立普遍意义的法则。从形式到实质。 创造力，规划能力的基础是记忆力。 3 表达：演讲，会话，写作所有的技巧都是建立在实力的基础之上的，要对自己的课题深刻理解。 3-1 演讲好酒也怕巷子深 将想法、研究成果传达给他人，说服他人也是研究的重要环节。 英语很重要，这无关爱不爱国。英语成为通用语言，由经济、政治，地缘政治等决定。 好的想法和结果是一切的基础。 设身处地地为听众讲，讲出来的东西就会自然精彩。 不做铺垫直切主题——令人深思快速直切主题最好的方法：先出手中最好的牌。BEST FIRST :将手中的幻灯片按重要性排序，才是最好的做法。 研究背景，研究现状等，知道的人是知道，不知道的人还是不知道。所以大多数人会觉得没意思，应该从观众最关心的地方开始。 听众最感兴趣的是开始的部分。一开始听众注意力比较集中，要抓过来。 观众听到一个有趣的观点，自然会想知道是怎么得出的。最重要的讲完了，目的达到了，后面随便怎么结束。 用说明的方式陈述结果 不要以道歉开始。先说自己解决了什么问题，发言时充满自信，让大家觉得，听我的演讲是有好处的。 只要内容正确，说的不精细也行。论文需要正确，缜密。演讲可不是这样，只有一条听众不能控制的时间粥，要先吸引观众注意，再进行情节的展开。 不是通过说明得到认可，而是从认可的基础上进行说明说明是想人理解，然而事实并不是这样。说明一个对方完全不知道的东西是很难的。将新知识，与听众已有的知识联系起来。 复杂的理论也要让人理解。很多复杂理论的出发点是简单自然而然的事情。将复杂的理论讲得通俗有趣，选择有趣浅显大家关心的例子。 看着对方的眼睛-自信自信来自与正面积极的想法 ：这个让我想起一件事情。当我们要做开题报告的时候，我听见了两种声音。声音 1 ：我报告的时候会被怼的，可怕。声音 2 ：我要大胆表达自己的想法，老师提出意见是一件好事情。 作为一个领导，一定要把自己的自信传染给部下：看到这里，耳畔突然传来涛涛老师的声音，你们一定能找到工作的。 论点鲜明的讨论，讨论最重要的是不要忘记讨论内容是什么。 尽量不要用 but 之类的词，否定词开头会给对方反感。 留给别人的印象最好和实力相符合。 提高英语会话的秘诀：抢着说，大声讲，静下心来听。 3-3 论文是一部推理小说 写论文最重要的事情是，只有一个中心思想。 好的论文：划时代的构思，杰出的成果，好的故事情节（读者参与进去：到底怎么了？难道是？问题终于解决了），写作技巧（构思和组织能力）。 论文的题目，论题明确，需要将论文的重要论述内容全部写出来。 章节构成，只看目录就能想象论文的内容。 段落，一个段落仅限于论述一个观点。 起承转合的构思： 起：让读者觉得读你的论文会得到好处。 承：针对期待展开情节，巧妙地设定假设。如何设定一个研究课题，在哪部分限定问题。 转：循序渐进地引导解答的关键。提出关键想法，让读者逐渐了解这些想法的效果。 合：将最重要的研究成果一并提出。带着一点自傲，这么好的结果，你做的出来吗？ 避免使用有歧义的词语 3-4 提案——当对象是上司时要通俗易懂具有影响力的研究： 新领域的研究 临界领域的研究 研究领域很窄，并且只有自己才能做到的研究 想要得到钱，除了课题本身，还要鲜明地表达出更深远层次上的有益内容。让别人觉得你的成功率高 3-5 关于演讲和英语的三个奇怪建议 演讲还是别准备得太好 展示的资料不要做成让别人一眼就可以看明白:做成仅仅有一些内容看不明白。然后才有的说呀！ 英语教育还是不要过早：“有效语言”的思考打牢靠。 4 寻求决断与明示的速度：关于日本与世界、自己与他人的思考 能用则用的现实实用主义 互联网的价值：更多更广泛的人和工作 强迫观念与存在感：每个人都在潜意识中认为别人在注意自己。事实上其实没有多少人在意，被看见也没关系。 吸引人的领导技术：领导人要能准确判断当前形势，能够制定出计划方针。 西部剧的警长，时代剧的地方官：在美国领导各方面都是最厉害的 无法顺利进行的时候，干脆转掉方向 评价是很主观的东西：为了做到“客观评价”而费事制定的规则没有什么意义。","link":"/2021/03/31/%E9%9D%92%E9%9D%92%E8%8A%B3%E8%8D%89/%E3%80%8A%E5%83%8F%E5%A4%96%E8%A1%8C%E4%B8%80%E6%A0%B7%E6%80%9D%E8%80%83%EF%BC%8C%E5%83%8F%E4%B8%93%E5%AE%B6%E4%B8%80%E6%A0%B7%E5%AE%9E%E8%B7%B5%E3%80%8B%E7%AC%94%E8%AE%B0/"},{"title":"《暗时间》笔记","text":"在玉泉图书馆，这本《暗时间》，居然和霍金的《时间简史》一样，被安排在理论物理学的书架上，害我找了很久。但是这本书，不管是名字还是封面，都不太像一本随笔。 1 暗时间 将问题放在潜意思的最高级：可以借助潜意识的力量，快速搜集线索。我想到那位发现苯环的科学家。 切换任务，在无形中会消耗大量时间：潜意识总是会跳出来打扰我。 如果你有一段时间，不知道花在A上还是B上，就不行，时间没了就是没了：好有道理，关于学 C++ 还是 Python，答案是两个都学，并且学的更多。 学一个东西之前，要积累充分多的疑惑。问好引发思考。 记忆与学习: 能在用的时候提取出来的知识才是你的知识。记忆编码，应该多一点提取线索，富含线索的记忆是罗马，条条大路通罗马。 情绪，环境，味道，声音都可以被当成提取线索被编码。写文章努力弄出一些关键词，作为回忆的 key。那些会总结，命名的人真的很厉害，总结出了 key。 从既有经验中总结知识的时候，应该适当抽象来得出更广的知识，方便后面举一反三。其实情绪是强化记忆的最佳线索和最佳提取工具。 2 思维改变生活2-1 逃出你的肖申克 世界是复杂的，各种因素互相影响。未来是不确定的，正确的行为不一定有正确的结果。别人的经验，不一定适用于自己的事情。 情绪系统：我们平时的行动和判断强烈依赖于情绪系统的输出，在情绪面前，理性的力量太弱小了。 先验假设：先验假设是在长期生活中无意识积累出来的有价值的假设,从多义性的信息源中抽取一种最靠谱的解释。当大脑中两个假设互相冲突的时候，更强硬的那个获胜。先验假设虽然可以帮助消除二义性，但是它是认知偏差的来源。消除二义性，需要引入新的线索。 大脑接收到的信息是很多歧义的，先验性假设产生偏见。 打破偏见：知识的局限性让自己很难证伪自己的猜想。唯一的办法就是开放心态，多积累不同的知识，和不同经历的人聊天。 金融市场上，小聪明的人从短趋势得到的经验是在时间上没有随机取样的可能有篇的数据集。智慧玩家应该无偏见的平均分配资金，投资指数。 记忆的构建性：很多记忆并不真实呢，掺杂情绪，先验假设。 偏见会成为自我实现的语言和自我妨碍的陷阱：女孩子就是学不好数学。我默写不好就是没有努力。 高级认知与本能：我们是生活在信息时代的远古人。很多时候，高级认知斗不过本能。 情绪 emotion 和动力 motion ：对事情的坚持来源于情感系统，没有这个系统的支持，很难走的远。 大脑非常善于为自己的行为作出合理的解释。真正的理由往往在我们意识触及不到的地方，由情绪大脑所掌控。 我们知道答案，但是往往不知道真正的求解过程。 去敏感化：通过理性训练，让自己在情感上不再畏惧。其实这边我想到了《鲁冰逊漂流记》：可怕的不是困难本身，而是害怕困难的心理。化用一下，一个问题有多难，不是因为问题本身，而是你自己认为解决它需要很多思维体力。其实解决之前哪知道要多少时间呢？ 自我辩护：大脑更容易相信对自己有利的判断，只要有可能，就相信是真的。不愿意接受不利的解释，甚至是事实。而且我们会勤于收集对自己有利的证据，拒绝对自己无力的证据。 两种解释：事情会有两种解释，平凡的解释，疯狂的解释。从自我辩护的角度看，事情有两种解释，对自己有利的解释，对自己不利的解释。 思想钢印：每个人都有思想钢印，由经验打造，由自尊维护，牢不可破。人的认知很多功能是硬编码的。 习惯是自我巩固的：单纯的自制是很痛苦的，改变习惯需要知识。 反思：将潜意识里面的东西从幕后拉出来，就有了反思的可能，而不是任由它左右你的行动。 Much of will is skill：意志力很大程度上来源于正确的方法，而非天生。 Much of intelligence is knowledge：智力不是天生的。 自利归因：一件事情发生的原因归结为对自己有利的情况。 事后归因：一旦知道结果后，所有指向这个结果的理由都变得显然和充分。不指向这个结果的理由都变得不显然和不充分。 注意力等于事实：世界是这个样子，是因为我看到它是这个样子。 2-2 小马过河不应该听小松鼠的 新知识的困难难以评估：知识需要掌握后才能豁然开朗。智商没有很大的差别，真实情况是，有人能做到，你也可以，如果有差别，可能只是时间的问题。 局部最优不一定是全局最优：眼前的利益最大化，只是小聪明。一昧绕开困难，永远得不到克服困难带来的收益。 自信和谦卑不矛盾: 前者相信自己能做到，后者不总是认为自己是对的。 3 跟波利亚学解题3-1 跟波利亚学解题这本书是我中学的时候看过的一本书。波利亚认为：思维教学，如果不能将解决问题后面的思维过程教给学生，那么就是没有意义的。解题的总目的是充分挖掘已知条件。抽象很重要。 作者总结的几个关键，但然这些方法都需要训练： 时刻不忘未知量因：这边和潜意识那边很像。专心的力量吧。 用特例引发思考：特例计较简单，但也有问题的本质结构，几个特例寻找一般解。 倒推法考：之所以这么厉害，因为结论中也蕴含丰富的条件，借助结论中的知识我们可以更好搜索解空间 试错 调整题目的条件 求解一个类似的题目：分析和记忆题目尽量抽象，便于建立知识本质联系，便于知识的迁移 列出和问题相关的知识 考察反面，考察所有其它的情况 将问题泛化：有些问题泛化后更简单 意识孵化发：将问题放进潜意识 烫手山芋法：给别人做吧 知识是思维的桎梏：知识提供了解决问题无与伦比的捷径，获取知识优势的同时防止被知识束缚是一门艺术。抽象是掌握这门技术的钥匙。 知识是解题的罗塞塔石碑：如果解题的关键不能从已有的知识中推导出来。 看的见的思考：这是一个很好的习惯，将思考过程写下来，时不时回头看。 练习：将本来需要用脑子解决的问题，变成下意识的行为。减轻意识的负担。 soft knowledge：知识已经在脑袋中了，需要产生联系。 hard knowledge：知识不在脑袋里。 3-2 锤子和钉子手里拿着锤子，看什么都像钉子。第一次见，是芒格说的。这句话告诉我们要客观地对待工具。 手里拿着钉子，看什么都像锤子。。这句话是作者反复强调的一个观点：如果专注于想要解决的问题，那么所有看到的东西，都会呈现出你没有看到过的一面。 ### 3-3 鱼是最后一个看到水的：框架 人是有很强的适应性，喜欢在既有的框架下解决问题。 语言之争的原因之一是人容易在自己熟悉的语言框架下思考，并产生严重的偏见。一个程序员越是熟悉一个语言，就越是容易被这个语言所累。避免被一个语言束缚的方法就是学其它的语言。 C++ 在所有语言里面有特殊性 学习 C++ 的第一原则：关注基本的概念和技术，而非特定的语言特性。学习编程重点在学习基本的概念和素养，一旦掌握了基本概念，细节会自然到位。 使用 C++ 的第一原则：将你的设计理念直接映射为 C++ 中的类或模板。脱离语言思考，使用语言实现。 3-4 只其所以然欧几里得式总结，确实适合总结知识，但是真的失去了太多重要的思维细节。除了知道别人的思维细节很重要，整理自己的思维细节也很重要。 很多高效的方法是从错误低效的方法中得到的。 3-5 康托尔、哥德尔、图灵——永恒的金色对角线看不懂，晕了：希尔伯特希望将带有直观意义解释的数学系统变成毫无意义的符号表达。哥德尔的不完备定理，击碎了这一企图。哥德尔不完备定理证明了，数学永远有需要我们以人的头脑从系统之外用我们独特的直觉去发现的东西。 所以最后我的结论：计算机是数学家一次失败思考的产物。所以，总有它解决不了的问题，需要人的直觉到系统之外找。 3-6 快排为什么那么快 平衡型策略是糟糕情况下表现最好的，比如二分法，12 个小球称 3 次。 3-7 平凡而又神奇的贝叶斯方法 概率论不过是将常识用数学公式表达了出来。——拉普拉斯 历史贝叶斯方法被证明是非常具有一般性且强大的推理框架，很牛的方法。自然界是无穷且不确定的，人的观察是片面的，只能看到表面的结果。这个时候我们需要提供一个猜测，需要做两件事： 后验概率：算出各种不同猜想的可能性大小。 模型比较：算出最靠谱的猜想是什么。 自然语言的二义性：The girl saw the boy with a telescope. 这个平凡的贝叶斯公式： p(B|A) = \\frac{P(AB)}{P(A)}小孩子也可以求解贝叶斯问题：我们对形式化的贝叶斯问题不擅长，但是对以频率形式呈现出的等价问题却很擅长。人不是很擅长抽象思考，我怀疑别人遇到难题都是形象思考，再抽象归纳。思考多了，抽象能力也就上来了。 拼写纠正用户打错字的时候，我们猜测的哪个比较准呢？ 设我们猜测的的单词为事件 $h$，用户实际输入为事件 $D$，那么有： P(h|D) = \\frac{P(hD)}{P(D)}再次利用一下贝叶斯公式： P(h|D) = \\frac{P(hD)}{P(D)}=\\frac{P(h)\\times P(D|h)}{P(D)}而 $P(D)$ 是常量。一般会根据错误单词做一个 bottom-up 的关联提取，提选出有可能是对的后选单词，所以 P(h|D)\\propto P(h)\\times P(D|h)以上公式的说明，一个猜测的好坏是，猜测本身可能性的大小（先验）和这个猜测生成我们观测到的数据的可能性的大小（似然）的乘积。具体一下就是，用户输入 the 的可能性，取决于 the 本身在词汇表中出现的可能性，乘以想打出 the 却打出 thew 的可能性。 模型比较与奥卡姆剃刀 奥卡姆剃刀：如果两个理论具有相似的解释力度，优先选取解释力度更高的。","link":"/2021/03/24/%E9%9D%92%E9%9D%92%E8%8A%B3%E8%8D%89/%E3%80%8A%E6%9A%97%E6%97%B6%E9%97%B4%E3%80%8B/"},{"title":"一闪而过的想法","text":"508a2a278850db84e575ac151144c6e938dae8346ec63b598fd9a8401b6d6368d2c644fc722ad04e5cd3c37b79cf137d5df9bbe432c73b72f6043d6f53016b76d66210462db5775df94806a697813381544df8781018cb475dd6244ddfe9819bc9be17b844f8291e40f278789dfd3a714114efdd04e7796eb9738dfb354ad379e5adc31d1eb64c432265d67026d251fd322de4b3bb8fdb93c657fc21f312ab004a1368fd849c2768916c7a987481c3351e4c1065636978fabab58780e32940d9fae837be728891d15f905a795d18cf95b4030cfde7f13b542989fa034a0fe872f4e2847125d4003b83d337e7006ecc4206f032e5eb6b0a152f6118f463fb2cf1c58fa1936e90cef6a9b0c05ad603b52dc18e155edf1ca46eb973a0a666f25fa6dff2d43c152d762ad56134ecf487e54efd0f0caeaff643552aa91fb3ea33e225df4a264ad42b29d2170324db4edda91c23c71718d8ffcfcdd535b08c1238046bccafa8e5d66af4f803a215279a6cc7d437a1aef023fb675de026ab6644d9fe1b1b25db27af4124560f2bc914e77191594ca8f34be22682beeb0a30d8d120e040d8aeafe9df2d9f605b3a99dd3284af188c87b037e9146967640de3ce423f03ded43e36b9c76e5550ba00c32f9dda725ff5913fa1aa39ac4901c7dba43d08d1fa5826f7486bb4c239308abd2db126e76edb311e9e3c8fd8f34f82b0be94c7775b8188b54976b4ba39690eaef6dfb4ed13ff4c1ef99ed39389afa358f708e48b46047b8603551f70953a91c576eb8c44c1afd16b96f456f097accfc9908856d92d4d476ab84ece79252b2c6dc5cb8cf40e64e49bd7278c04da1d273a63a5bbd5faec92abf66c34d586d05191ba01bfe4593c72b1a44bf39c41288fe87dd3515bff78867ac7bf1b15d0d89da9722de94ae4320c4520e49cd0fef19ea69a526ea4cc11c982f74b5e18e310279b1037c8861c9d1b16be4081c820ff04b28125105f6d35ab475252797c18c5d60f7e24c71f384e4e784e311bb6ebdc6665117ef2d2f72bec63608185896538b36f2698e8c203fe5bac880f2d3b681e191f9698fc5f33e5aa1ee56994476bde0a1eb6fd97027935d91c0f20780d02a517f4492821728835f1df8f377987e9529ad58da4cae7c307e99842d903d269b5d390ef81e04849cffc67e25f9db0c62fc85b3f29680f4d8048e2292e425e09b8c9593117cedb03f9e02e68107b9702dd107693b37f459f92b54538196f9358d54dbff94cfac1d096488887c24db4200b898d6883c2db9bf95b3214e861cbbc2e374c7c1eb9586329ca858f44646b89bf4405826bd50b9ac85d2ce3b1175446f847df999c620fa18c3af7a89f236d715d933929894c4100791c196e268458eb08237a6fe60c1c33c1b81203def346023cb71b2feab296364e2329c69e611518715fec71a565151e7438da61f0ee34152ed7c43b28b8ba981f35c0a1b71d0ce5414b6e73c09062368928231ca93f577bae95e87c74a00f0f1a8c02828498b33491f4ed672b2e491e7b2b3f1f3d35c82f425414a510f25888e57a9a4149f05c8184e130bcfdaaeecff9a3e6145f4bf0a8fe0f773007e8502d2d4cc7dc479a66a450bd1f5098ac3712fe29a75acd352e74a14b053ff6e3488c9fe4e2b75f6d407f3a13fc8ba132fb537e13c44d67ee7527f15fea0707da107f514a583da6fc008abb1306aae22da31a13f0421bf18cb2c3aef5504da7dc49854854cd2a6967408d8ade13c68ed5ff55d4949e2679932daddcf0048a65dfe4198713981409629a2b14abf91d51721d9c937b02b1631eb9b0366d7105e353366b2f8a5bdef0cd7b15a1bcf4fdb9b9cf281ff0c3f23a3eeedffd05e30de59d049f9834c851c371ba45f8446aada29b5e64ab40e106ab844acdd0e263f9f7a9fd971cc2ef6ab2328cab611df12bb807450501b9f47201c355892d4957bfaa24bde8f3ec285d69ef4595109c99e909b09caca4be017be285c4098ce1cad7dff0ef39f5c504729fbd107f42875e79bbba41cc180868478e30fe2e7723f5c6e50f6d69366bd8dbae98e8cc8f2e757b8aec28a8677fe14bddd1e974b1a5fd5d2d360356b5479809f1a22568fb16d5b5625f246d5efc471f273b55397fcceceb4ff5f6df0a8f555de4334c23a0a46f7c59bbfa1abc821331d1fa58eb525feb4f0d8f6cf2df2749fe85b73ff03be4ccd38d4944dccbb9f56d570c459960e4aa3e50557ac73ee21e37b2be7fdfce0ca8b33e50751bc0d5171f8fdde7c13c047f849e58f28921c67affd1e317af6ad496e6dbe6996a663f600ccca327a9b448b1742d6c6a0f233bba980f077df7d87301eab45da41fa5de31822ad8239e7194a9d036b339fdf35cf2c75d878cadee1a8b2aa15d248b261f089d5968f236eacca2728d80e836784e08da8fc68254b335d65d0d5ced7eeed19c270f1ea97df61ff9a4222c8b9320ee17a4c90dc5d131b7c627631ec994528e83f8913141ee9b3278ab9f7502ca7ace94ba7ac8803d22717386427b3bfc037a8eaea3ff9adf4ad4e44ce24793bf5f4b2960fdd8ea3b5be8b525133b0968ac044c8554f333cb623ac658ed9adecc4e0eb0f35a2ffc5c46c9f992622fdf724c072cbf99e1c33daa7fbfb9e3f0a2d9a3dd0f082bac969302ee914d54f1353c25c224081753bc4d98ad01126305d8232735c66781f1a4e227d98f94359dcbcac0a7b68640b4f14febe4f3c05bf389f0c43109c072c84ba431c0fa61a9c37caaf787130acec7c243e531253c2ad520c82dc4111b2742c7dedb1a49c874858407e5f2232cd86ff32477643f15b5114471197372f899829375b1b8c64069d2674edc313a19c3179775815a9a6ba49efa11c90493543be50a4290880b732c035d6dae33071eea1a75bf2e847d5afaef066eb7a5164abf38210dd094fb1b7e3f7cc15737eadb3279fb33dc9914f6fd57a15c08df845b88904a905880a62e13ab7c3f29c3638ab03325cfac540cbfd73c9af3e0b257c1ef5bb6898e97fc777e278027ca200cd7837be0225b2869ac86e8080d80fc0ceab665f54e8ff6ed356c2b0e54e2afc72845a95bc3e7a08e4af74d8db1661155df4229d661851de544408c9a503df1283e9fd4ec13454cb214864e72087319c43c548a13a5f3fb8cee7befb73c7a6f86ee4b87ad19effda7714dd3dc329157f37dc9f71557906ec6d647a1f9c0eac841a18ee1d3b53d0ba132104ad14d6923213e39022cec25774cec899c932d16e7869aa3ba5bc21802b8cd0707ac9c7d89239a7f726bbd41ee78a00627de20366700208f0de27b37d8a713f74d5ec8eb71fef853d44bfe02f30d17fd03ce1d7a0edf5e0d0295d123d282d3f4354fd01684bf8dfb66346da1b73c915eee6be2105c3697666ff75a93dc6b8d4d3bc2fd526dfc8dcc995d5c9e6d1a39555593f5c458e45fedcde9f0123e18d69fccf76c2dbab5da9a4f14edae3602a63b6863ff92775e461dafa0db324eb1bedc2a5d0ca8287ecf5bda9eeaf9b7a58e20bfdabe18fd3657425977c9929543c07eb75125e09b9fb5242cb6e94d776376cf09a0350ba8e1d061656c7407bbb4aaeabe44981106cf978aea363602bac2aef8f0b5bb14651f592f993099d403a8b5ca11f90dce044eebd6b4668409d1bb7eba02044af00b337e2a769b9f5532ccf1576702dcf5b33d1f7026275b006087364474c4fad791ff0209f955214440fadac3757ce0061f6f01e9d067b4edc31c0922b4123e1ac1e266096c7e1c99d5ed72ab0132c4e0f93b00fefaeb4a9fe7abec8b5fdda1e3285e7de11eb37fa8a8e3465536b63c1117d1c3045074e360946cacf16611e20c68e14f8ddd501fa8812c5bd573532785a28b32170c3554c03277ecf3afaaa2bbce1a7038900ebb4c1baa58f0b1fbc2de3353305235644f3ba3113a63d1cc62868e1e932f94de2611a575e8e98f22838aff05652843503eebd7706a4d96c60e651d30d34702bf3b24504deba12f499089ef64655d7e15a5407c79f0aff28130b938f26f4cf8be31e93ba2a684d7302a65ce772e7a48318a8610fd6814a4843c7f76a3fc48b430869ffe04b02e56feaa1eda6e1041de3c3193246e0d5d07cb68e3edbd027b415ee70cbf631b4ce46ea1c90bc9ec40130e7ffe9720e2489a20d052328bdffeee7c574aad5117fae8eb61fe668c165a5601a7a01f2ac158d41356940cde1a9ef38827f0631b027b10d300cd6b1272e4a1092f2a2e9eb67c1d358b9717f9b446ee0402ee9cee4cc7c9b116320c3711942c31bef49f3395ed44fa1cd000dc68682f5f53caff4af6248cf587b31acbe89770314fcc6e9fd6cfbdc10c1701b6a023a100ecd5365f22333e356bffc5be3eecccdc03810f48fd44ad683d686c25a4b89b8665f23113dd2a00df20 我的温柔可爱都设置为仅你可见！","link":"/2021/05/28/%E7%99%BD%E5%99%AA%E9%9F%B3/%E4%B8%80%E9%97%AA%E8%80%8C%E8%BF%87%E7%9A%84%E6%83%B3%E6%B3%95/"},{"title":"palabos编程指南","text":"就是user_guide chapter 5的翻译了 1 编程指南基础数据类型在 Palabos 中，有符号和无符号整数数据类型 int 和 unsigned int 被系统地替换为 plint 和 pluint（只有少数例外）。Palabos数据类型plint和pluint，它们在32位机器上是32位，在64位机器上是64位。 为了程序的并行，将 cout 替换为 pcout，将 cerr 替换为 pcerr，将 clog 替换为 pclog。文件输出，用 plb_ofstream 替换 ofstream。 内存管理当一个函数数的某个参数为“指向对象的指针”，那这个函数就有删除对象的责任。但是当一个函数返回指针给你时，你就承担删除指针的责任。 为了避免出现，多个指针指向一个对象，但是某个指针删除了对象。Palabos 中采用一个对象一个指针的方法，当第二个实例需要访问一个已经在使用的对象时，它就会创建一个副本。所以所有 Palabos 的类都有一个 clone() 方法。 12A* object1 = new A;A* object2 = object1-&gt;clone(); 每当编写从 Palabos 类型继承的类时，您都需要实现此方法: 1234A*A::clone()const{ return newA(*this);} 数组对于粒子群的信息当然是存储在专业化和并行化的 BlockLatticetypes 之一中： 1234MultiBlockLattice3D&lt;double,D3Q19descriptor&gt; lattice(nx,ny,nz);// Block 带有三维离散方法：D3Q19MultiScalarField3D&lt;double&gt; field(nx,ny,nz);// 一个简单的数组 vector 类型的数据： 123plint numspecies = 5;vector&lt;double&gt; viscosities(numSpecies);viscosities[3] = 0.63; Array 类型的数据(这个类型的优势是，在调试模式下编译 Palabos 时，会执行范围检查)： 12Array&lt;double,3&gt; velocity(0., 0., 0.5);velocity[0] = 0.1; 速度和密度为了提高计算的精度，palabos 中使用一阶速度矩 j 和 rhoBar = rho（密度） - 1。不过 j 和 rhoBar 可以简单转换： 1234rho = Descriptor&lt;T&gt;::fullRho(rhoBar); // 应该是个静态成员函数，没有对象也可以访问。本质上是全局函数，封装在类里面，形成一个整体，易于维护。rhoBar = Descriptor&lt;T&gt;::rhoBar(rho);j[iD] = rho*u[iD];u[iD] = 1./rho*j[iD]; 并行方法看不懂，先跳过… 2 非侵入式开发不修改地扩展尽量不要修改源码，用继承的方式写自己的新方法。 使用 palabos 做非侵入式开发 写新的 dynamics 类 新的碰撞方法 写新的数据处理器 写新的晶格描述器 例如新的速度离散和权重等 参考资料学习笔记：Palabos（1）格子离散化和动态行为","link":"/2021/06/07/%E6%8A%80%E6%9C%AF/palabos/palabos%E7%BC%96%E7%A8%8B%E6%8C%87%E5%8D%97/"},{"title":"palabos 安装使用","text":"初步体验一下 palabos 的使用。 palabos 是基于 LBM 方法的开源库。从官网下载，解压之后就是一堆 palabos 的源代码。源代码是用 C++ 写的，里面有各种类和对象，可供使用。 1 安装虚拟机为了编译方便，最好是在 Linux 的环境下使用。所以先安装虚拟机。 安装VMware Tool，让屏幕变大一点。 2 运行一个标准案例下载palabos。 一个方腔流的案例按照官网的流程试一下： 安装编译所需要的软件 1$ sudo apt install gcc clang cmake make 配置 MPI 等功能 1$ sudo apt install libopenmpi-dev imagemagick libhdf5-dev libhdf5-mpi-dev ccache 试着跑一个案例 12345$ cd palabos/examples/showCases/cavity2d/build$ cmake ..$ make$ cd ..$ ./cavity2d 这样就完成了一个方腔流的案例。 build 文件夹 CMakeCache.txt Makefile 在 build 文件夹中，使用 Cmake .. 生成的编译用的文件。 cmake_install.cmake libpalabos.a 一个二进制的文件 CmakeFiles 文件夹 将 src 文件夹中所有的源文件都编译了，怪不得那么久。 3 以后要使用这个开源包，还得明白 LBM 的基本算法，有一定的编程知识，熟悉包里面定义的数据，类等。","link":"/2021/05/04/%E6%8A%80%E6%9C%AF/palabos/palabos%E5%AE%89%E8%A3%85/"},{"title":"C++模板","text":"被 palabos 倒逼学 C++。 1 模板：与类型无关的代码模板让数据，函数的参数，函数的返回值能够是任何类型。模板的声明只能在全局，命名空间或类范围内进行。 1-1 函数模板一个小例子123456789101112131415161718192021222324#include &lt;iostream&gt; using namespace std;template &lt;class T&gt;void sswap(T &amp;a, T &amp;b){ T tmp = a; a = b; b = tmp; }int main(){ int a = 5; int b = 4; sswap(a,b); cout &lt;&lt; &quot;a = &quot; &lt;&lt; a &lt;&lt; endl; cout &lt;&lt; &quot;b = &quot; &lt;&lt; b &lt;&lt; endl; return 0;} 1-2 类模板: 一个模板栈的例子定义类模板类模板只是编译指令，实例化都是在编译期完成的。所以不能单独编译，定义和实现都在同一个文件中，最简单的就是放在头文件中。 Palabos 很多功能是用类模板封装的，所以源代码是一堆头文件。 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859#ifndef STACKTP_H_#define STACKTP_H_template &lt;class Type,int MAX&gt; // 类型参数，非类型参数class Stack{private: Type items[MAX]; int top; public: Stack(); bool isempty(); bool isfull(); bool push(const Type item); bool pop(Type &amp;item); };template &lt;class Type,int MAX&gt;Stack&lt;Type,MAX&gt;::Stack(){ top = 0;}template &lt;class Type,int MAX&gt;bool Stack&lt;Type,MAX&gt;::isempty(){ return top == 0;}template &lt;class Type,int MAX&gt;bool Stack&lt;Type,MAX&gt;::isfull(){ return top == MAX;}template &lt;class Type,int MAX&gt;bool Stack&lt;Type,MAX&gt;::push(const Type item){ if (top &lt; MAX) { items[top++] = item; return true; } else return false;}template &lt;class Type,int MAX&gt;bool Stack&lt;Type,MAX&gt;::pop(Type &amp;item){ if (top &gt; 0) { item = items[--top]; return true; } else return false; }#endif 模板的具体化12345678910111213141516171819202122232425262728293031323334353637383940414243444546#include &lt;iostream&gt;#include &lt;string&gt;#include &lt;cctype&gt;#include &quot;stacktp.h&quot;using namespace std;int main(){ Stack&lt;string,3&gt; st; // 传入类型参数和非类型参数 char ch; string po; cout &lt;&lt; &quot;A: push\\nP: pop\\nQ: quit\\n&quot;; while (cin &gt;&gt; ch &amp;&amp; toupper(ch) != 'Q') { while (cin.get() != '\\n') continue; if (!isalpha(ch)) { cout &lt;&lt; &quot;input again:&quot;; continue; } switch(ch) { case 'A': case 'a': cout &lt;&lt; &quot;Enter: &quot;; cin &gt;&gt; po; if (st.isfull()) cout &lt;&lt; &quot;stack already full\\n&quot;; else st.push(po); break; case 'P': case 'p': if (st.isempty()) cout &lt;&lt; &quot;stack already empty\\n&quot;; else { st.pop(po); cout &lt;&lt; &quot;PO #&quot; &lt;&lt; po &lt;&lt; &quot; popped\\n&quot;; break; } } cout &lt;&lt; &quot;A: push\\nP: pop\\nQ: quit\\n&quot;; } cout &lt;&lt; &quot;Bye\\n&quot;; return 0; } 成员模板：作为结构，类或模板类的成员 下面的模板类将一个 模板类 和 模板函数作为其成员: 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;iostream&gt;using std::cout;using std::endl;template &lt;typename T&gt;class beta{private: template &lt;typename V&gt; // 模板类作为成员 class hold { private: V val; public: hold(V v = 0) : val(v) {} void show() const { cout &lt;&lt; val &lt;&lt; endl; } V Value() const { return val; } }; hold&lt;T&gt; q; // 成员模板的对象 hold&lt;int&gt; n; // 成员模板的对象public: beta( T t, int i) : q(t), n(i) {} // 构造函数这样传递信息 template&lt;typename U&gt; // 函数模板作为成员 U blab(U u, T t) { return (n.Value() + q.Value()) * u / t; } void Show() const { q.show(); n.show();}};int main(){ beta&lt;double&gt; guy(3.5, 3); cout &lt;&lt; &quot;T was set to double\\n&quot;; guy.Show(); cout &lt;&lt; &quot;V was set to T, which is double, then V was set to int\\n&quot;; cout &lt;&lt; guy.blab(10, 2.3) &lt;&lt; endl; cout &lt;&lt; &quot;U was set to int\\n&quot;; cout &lt;&lt; guy.blab(10.0, 2.3) &lt;&lt; endl; cout &lt;&lt; &quot;U was set to double\\n&quot;; cout &lt;&lt; &quot;Done\\n&quot;; // std::cin.get(); return 0; } 将模板作为参数类似于类，模板类可以用作于基类，也可以用做于组件类，还可以用作于其他模板类型的参数。 123456789101112131415161718192021222324252627282930313233343536#include &lt;iostream&gt;#include &quot;stacktp.h&quot; // 需要用到前面这个头文件using namespace std;template &lt;template &lt;class Type,int MAX&gt; class Thing&gt; // template &lt;class Type,int MAX&gt; class 类型的参数 Thingclass Crab{private: Thing&lt;int,5&gt; s1; Thing&lt;double,5&gt; s2;public: Crab() {}; // assumes the thing class has push() and pop() members bool push(int a, double x) { return s1.push(a) &amp;&amp; s2.push(x); } bool pop(int &amp; a, double &amp; x){ return s1.pop(a) &amp;&amp; s2.pop(x); }}; int main(){ Crab&lt;Stack&gt; nebula; // Stack must match template &lt;typename T&gt; class thing int ni; double nb; cout &lt;&lt; &quot;Enter int double pairs, such as 4 3.5 (0 0 to end):\\n&quot;; while (cin&gt;&gt; ni &gt;&gt; nb &amp;&amp; ni &gt; 0 &amp;&amp; nb &gt; 0) { if (!nebula.push(ni, nb)) break; } while (nebula.pop(ni, nb)) cout &lt;&lt; ni &lt;&lt; &quot;, &quot; &lt;&lt; nb &lt;&lt; endl; cout &lt;&lt; &quot;Done.\\n&quot;; return 0; }","link":"/2021/06/03/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/C++%E6%A8%A1%E6%9D%BF/"},{"title":"palabos使用-Cmake编译","text":"各种工具，可真多。 1 make &amp; makefilesg++ 编译的 4 个过程 预处理，-E 表示编译器仅对输入文件进行预处理，之后还是源文件 1g++ -E test.cpp -o test.i 编译，产生汇编语言文件 1g++ -S test.i -o test.s 汇编语言，生成机器语言的目标代码(注意这边的 c 是个小写的)：正确的源文件都可以被编译成目标文件，每个源文件都有一个对应的目标文件。编译器只检查语法，函数和变量是否被声明。 1g++ -c test.s -o test.o 链接，生成可执行文件：使用目标文件链接成库文件。目标文件太多了，链接时需要指出目标文件的文件名，对于编译很不方便，给目标文件打个包，这个包就是库文件。链接器会在所有的目标文件中寻找函数的实现。 1g++ test.o -o test 一个小例子说明 makefile makefile: 文件依赖关系+编译命令 当需要编译很多源文件的大工程时，可以使用 makefiles 让编译更高效。makefiles 是一系列的 gcc/g++ 命令，并且记录文件之间的依赖关系。Make 是一个工具，执行 makefiles 中的内容。 Hello.cpp 具体函数的实现 12345678910111213//这是Hello.cpp#include&lt;iostream&gt;#include &quot;Hello.h&quot;using namespace std; Hello::Hello(){} int Hello::Display(){ cout &lt;&lt; &quot;Hello,ivy!\\n&quot; &lt;&lt; endl; return 0;} Hello.h 头文件中是声明 123456//这是Hello.hclass Hello { public: Hello(); int Display();}; main.cpp 总的文件 1234567#include &lt;iostream&gt;#include &quot;Hello.h&quot;int main(){ Hello theHello; theHello.Display(); return 0;} 用命令行的方法分四步编译 12345678$ g++ -E Hello.cpp -o Hello.i$ g++ -E main.cpp -o main.i$ g++ -S Hello.cpp -o Hello.s$ g++ -S main.cpp -o main.s$ g++ -c Hello.cpp -o Hello.o$ g++ -c main.cpp -o main.o$ g++ Hello.o main.o -o main$./main 用 makefile 文件编译，学习写这个文件看这边 $\\to$ makefile clean 命令后面没有依赖关系，所以得用 make clean 命令来执行。 12345678Hello:mian.o Hello.o g++ main.o Hello.o -o Hellomian.o:main.cpp g++ -c main.cpp -o main.o Hello.o:Hello.cpp g++ -c Hello.cpp -o Hello.oclean: rm Hello.o main.o Hello makefile 中定义变量，并且用 $(变量名) 使用变量。类似于宏，只要修改一处即可。 12345678910object = main.o Hello.oHello: $(object) g++ $(object) -o Hellomian.o:main.cpp g++ -c main.cpp -o main.o Hello.o:Hello.cpp g++ -c Hello.cpp -o Hello.oclean: rm $(object) Hello makefile 可以自动推导依赖文件的关系，以及命令 12345678object = main.o Hello.oHello: $(object) g++ $(object) -o Hellomian.o:Hello.o:clean: rm $(object) Hello 2 Cmake对于大型工程，写 makefile 是很困难的，于是有了 Cmake 这个工具。Cmake 是一个自动生成 makefiles 的工具。CMake是一个跨平台的安装编译工具，可以用简单的语句来描述所有平台的安装(编译过程)。 语法特性介绍 基本语法格式：指令（参数1 参数2…） 参数用括弧括起来，参数之间用空格或是分号分开 指令是大小写无关的，参数和变量是大小写相关的 变量使用${}方式取值，但是在 IF 语句中直接使用变量名 重要指令和常用变量 重要指令 12345678910111213141516171819202122232425# 指定最低版本要求cmake_minimum_required(VERSION 2.8.3)# 指定工程名称为 HELLOWORLDproject(HELLOWORLD)# 显式定义变量，定义变量 SRC，其值为 sayhello.cpp hello.cppset(SRC sayhello.cpp hello.cpp)# include_directories 指定头文件的搜索路径，相当于 g++ 编译器的 -l 参数include_directories(/usr/include/myincludefolder ./include)# link_directories 向工程中添加多个库文件的搜索路径link_directories(/usr/lib/mylibfolder ./lib)# add_library 通过前面定义的变量生成 libhello.so 共享库add_library(hello SHARED ${SRC})# add_executable编译 main.cpp 生成可执行文件 mainadd_executable(main main.cpp)# target_link_libraries 为可执行文件 main 链接 hello 动态库target_link_libraries(main hello)# ... 源文件中主目录的 CMakeLists.txt 通过 add_subdirectory 添加子目录的 CMakeLists.txt 常用变量 1234# 变量 CMAKE_BUILD_TYPE，设置编译类型为 Debugset(CMAKE_BUILD_TYPE Debug) # ... Cmake 编译工程 外部构建： 创建 build 文件夹，加输出的中间文件都放在这个里面 Cmake 代码实践1：超级小的工程还是 一个小例子说明 makefile 中的三个文件，文件结构： 12345678# 指定最低版本要求cmake_minimum_required(VERSION 3.0)# 指定工程名称project(HELLO)# 生成可执行文件add_executable(main main.cpp) 参考资料简单构建linux c++ cmake工程结构 干货：构建C/C++良好的工程结构 《CMake实践》 基于VSCode和CMake实现C/C++开发 | Linux篇 CMake 手册详解","link":"/2021/05/18/%E6%8A%80%E6%9C%AF/palabos/palabos%E7%BC%96%E8%AF%91/"},{"title":"C++结构","text":"被 palabos 倒逼学 C++。 结构一个有构造函数，有成员函数的结构。返回回一个矩形格子的四个点： 123456789101112131415161718192021222324252627282930313233#include &lt;iostream&gt;using namespace std;struct Box2D { Box2D() : x0(), x1(), y0(), y1() { } // 冒号后面对成员进行初始化 Box2D(int x0_, int x1_, int y0_, int y1_) : x0(x0_), x1(x1_), y0(y0_), y1(y1_) { } /// Return same box, shifted by (deltaX,deltaY) Box2D shift(int deltaX, int deltaY) const { return Box2D(x0+deltaX, x1+deltaX, y0+deltaY, y1+deltaY); // 返回一个结构 } bool operator==(Box2D const&amp; rhs) const { return x0 == rhs.x0 &amp;&amp; y0 == rhs.y0 &amp;&amp; x1 == rhs.x1 &amp;&amp; y1 == rhs.y1; } int x0, x1, y0, y1;};int main(){ Box2D box = {1,10,2,9}; cout &lt;&lt; &quot;box: &quot; &lt;&lt; box.x0 &lt;&lt; &quot; &quot; &lt;&lt; box.x1 &lt;&lt; endl; Box2D box1,box2; cout &lt;&lt; &quot;box1: &quot; &lt;&lt; box.x0 &lt;&lt; &quot; &quot; &lt;&lt; box.x1 &lt;&lt; endl; box2 = box.shift(1,2); cout &lt;&lt; &quot;box2: &quot; &lt;&lt; box2.x0 &lt;&lt; &quot; &quot; &lt;&lt; box2.x1 &lt;&lt; endl; return 0;}","link":"/2021/06/08/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/C++%E7%BB%93%E6%9E%84/"}],"tags":[{"name":"ICARUS","slug":"ICARUS","link":"/tags/ICARUS/"},{"name":"爱读书","slug":"爱读书","link":"/tags/%E7%88%B1%E8%AF%BB%E4%B9%A6/"},{"name":"数学","slug":"数学","link":"/tags/%E6%95%B0%E5%AD%A6/"},{"name":"树莓派","slug":"树莓派","link":"/tags/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"palabos","slug":"palabos","link":"/tags/palabos/"},{"name":"C++","slug":"C","link":"/tags/C/"}],"categories":[{"name":"可爱挖掘机","slug":"可爱挖掘机","link":"/categories/%E5%8F%AF%E7%88%B1%E6%8C%96%E6%8E%98%E6%9C%BA/"},{"name":"数学","slug":"数学","link":"/categories/%E6%95%B0%E5%AD%A6/"},{"name":"树莓派","slug":"树莓派","link":"/categories/%E6%A0%91%E8%8E%93%E6%B4%BE/"},{"name":"白噪音","slug":"白噪音","link":"/categories/%E7%99%BD%E5%99%AA%E9%9F%B3/"},{"name":"青青芳草","slug":"青青芳草","link":"/categories/%E9%9D%92%E9%9D%92%E8%8A%B3%E8%8D%89/"},{"name":"技术","slug":"技术","link":"/categories/%E6%8A%80%E6%9C%AF/"},{"name":"palabos","slug":"技术/palabos","link":"/categories/%E6%8A%80%E6%9C%AF/palabos/"},{"name":"计算机技术","slug":"技术/计算机技术","link":"/categories/%E6%8A%80%E6%9C%AF/%E8%AE%A1%E7%AE%97%E6%9C%BA%E6%8A%80%E6%9C%AF/"}]}